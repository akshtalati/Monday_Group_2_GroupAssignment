/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;

import model.Business.Business;
import model.Business.ConfigureABusiness;
import model.CustomerManagement.CustomerDirectory;
import model.CustomerManagement.CustomerProfile;
import model.MarketingManagement.MarketingPersonDirectory;
import model.MarketingManagement.MarketingPersonProfile;
import model.OrderManagement.MasterOrderList;
import model.OrderManagement.Order;
import model.OrderManagement.OrderItem;
import model.Personnel.EmployeeDirectory;
import model.Personnel.EmployeeProfile;
import model.Personnel.Person;
import model.Personnel.PersonDirectory;
import model.ProductManagement.Product;
import model.ProductManagement.ProductCatalog;
import model.SalesManagement.SalesPersonDirectory;
import model.SalesManagement.SalesPersonProfile;
import model.Supplier.Supplier;
import model.Supplier.SupplierDirectory;
import model.UserAccountManagement.UserAccount;
import model.UserAccountManagement.UserAccountDirectory;

/**
 *
 * @author akshtalati
 */
public class ui extends javax.swing.JFrame {
    

    /**
     * Creates new form ui
     */
 public ui() {
        initComponents();

         Business business = ConfigureABusiness.initialize();
          printBusinessDetails(business);

           populateTaskTable(business);


           populateTask23Table(business);

}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbTitle = new javax.swing.JLabel();
        lbTask1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTask1 = new javax.swing.JTable();
        lbTask23 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbTask23 = new javax.swing.JTable();
        btnView = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 153, 255));


        lbTitle.setFont(new java.awt.Font("Segoe UI Historic", 3, 18)); // NOI18N
        lbTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lbTitle.setText("Pricing Model");

        lbTask1.setFont(new java.awt.Font("Segoe UI Historic", 3, 14)); // NOI18N
        lbTask1.setText("Browse Product Price Performance");

        tblTask1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Target Price", "Actual Price ", "Price Variance", "Performance index"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTask1);

        lbTask23.setFont(new java.awt.Font("Segoe UI Historic", 3, 14)); // NOI18N
        lbTask23.setText("Adjust Target price Higher / Lower");

        tbTask23.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Target Price", "Actual Price ", "Sales (low / high)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbTask23);

        btnView.setText("View Product");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)


            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 745, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()

                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbTask1)
                            .addComponent(lbTask23, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))

                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnView)
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTitle)
                .addGap(51, 51, 51)
                .addComponent(lbTask1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnView)
                .addGap(5, 5, 5)
                .addComponent(lbTask23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)

                .addGap(0, 0, Short.MAX_VALUE))

        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
                int selectedRowIndex = tblTask1.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select the product first", "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Product product = (Product) tblTask1.getValueAt(selectedRowIndex, 0);
        
    }//GEN-LAST:event_btnViewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnView;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbTask1;
    private javax.swing.JLabel lbTask23;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JTable tbTask23;
    private javax.swing.JTable tblTask1;
    // End of variables declaration//GEN-END:variables

    private void printBusinessDetails(Business business) {
        System.out.println("==== Business Details ====");
        System.out.println("Business Name: " + business.getBusinessName());

        // Print Supplier and Product details
        System.out.println("\n--- Suppliers and Products ---");
        business.getSupplierDirectory().getSupplierList().forEach(supplier -> {
            System.out.println("Supplier: " + supplier.getSupplierName());
            supplier.getProductCatalog().getProductList().forEach(product -> {
                System.out.println("\tProduct: " + product.getProductName() +
                        " | Floor Price: " + product.getFloorPrice() +
                        " | Ceiling Price: " + product.getCeilingPrice() +
                        " | Target Price: " + product.getTargetPrice());
            });
        });

        // Print Customer details
        System.out.println("\n--- Customers ---");
        business.getCustomerDirectory().getAllCustomers().forEach(customer -> {
            System.out.println("Customer: " + customer.getCustomerName());
        });

        // Print Orders and Order Items
        System.out.println("\n--- Orders ---");
        business.getMasterOrderList().getOrders().forEach(order -> {
            System.out.println("Order for Customer: " + order.getCustomer().getCustomerName());
            order.getOrderItems().forEach(orderItem -> {
                Product product = orderItem.getSelectedProduct();
                System.out.println("\tOrder Item: " + product.getProductName() +
                        " | Price: " + orderItem.getActualPrice() +
                        " | Quantity: " + orderItem.getQuantity());
            });
        });

    }


    private void populateTaskTable(Business business) {
    DefaultTableModel model = (DefaultTableModel) tblTask1.getModel();
    model.setRowCount(0);

    // Loop through suppliers, products, and their orders
    for (Supplier supplier : business.getSupplierDirectory().getSupplierList()) {
        for (Product product : supplier.getProductCatalog().getProductList()) {
            double totalActualPrice = 0;
            int totalQuantity = 0;

            // Calculate the total actual price and quantity for the product
            for (Order order : business.getMasterOrderList().getOrders()) {
                for (OrderItem orderItem : order.getOrderItems()) {
                    if (orderItem.getSelectedProduct().equals(product)) {
                        totalActualPrice += orderItem.getActualPrice() * orderItem.getQuantity();
                        totalQuantity += orderItem.getQuantity();
                    }
                }
            }

            // Calculate average actual price (if applicable)
            double averageActualPrice = totalQuantity > 0 ? totalActualPrice / totalQuantity : 0;

            // Calculate price variance and performance index
            double priceVariance = product.getTargetPrice() - averageActualPrice;
            double performanceIndex = averageActualPrice > 0 ? averageActualPrice / product.getTargetPrice() : 0;

            // Add data to the table
            Object[] row = new Object[]{
                product.getProductName(),
                product.getTargetPrice(),
                averageActualPrice,
                priceVariance,
                performanceIndex
            };
            model.addRow(row);
        }
    }  
    }



    private void populateTask23Table(Business business) {
          DefaultTableModel model = (DefaultTableModel) tbTask23.getModel();
    model.setRowCount(0);

    // Loop through suppliers and their products
    for (Supplier supplier : business.getSupplierDirectory().getSupplierList()) {
        for (Product product : supplier.getProductCatalog().getProductList()) {
            double totalActualPrice = 0;
            int totalQuantity = 0;

            // Calculate the total actual price and quantity for the product
            for (Order order : business.getMasterOrderList().getOrders()) {
                for (OrderItem orderItem : order.getOrderItems()) {
                    if (orderItem.getSelectedProduct().equals(product)) {
                        totalActualPrice += orderItem.getActualPrice() * orderItem.getQuantity();
                        totalQuantity += orderItem.getQuantity();
                    }
                }
            }

            // Calculate average actual price (if applicable)
            double averageActualPrice = totalQuantity > 0 ? totalActualPrice / totalQuantity : 0;

            // Determine the type
            String type;
            if (averageActualPrice == product.getTargetPrice()) {
                type = "Optimized";
            } else if (averageActualPrice < product.getTargetPrice()) {
                type = "Low";
            } else {
                type = "High";
            }

            // Add data to the table
            Object[] row = new Object[]{
                product.getProductName(),
                product.getTargetPrice(),
                averageActualPrice,
                type
            };
            model.addRow(row);
        }
    }

    }


}
